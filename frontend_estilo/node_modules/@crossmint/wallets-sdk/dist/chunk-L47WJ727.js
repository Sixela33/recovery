import{a as d}from"./chunk-JUSY5XEE.js";import{a as u}from"./chunk-M4ELAV7U.js";import{f as a}from"./chunk-BW7YYVZE.js";import{validateAPIKey as m}from"@crossmint/common-sdk-base";var g=class{constructor(e){this.config=e;this._needsAuth=!0;this._authPromise=null;this.initialize(),this.type=this.config.type}locator(){return this.config.locator}address(){return this.config.address}initialize(){return a(this,null,function*(){if(this.config.clientTEEConnection==null){let e=m(this.config.crossmint.apiKey);if(!e.isValid)throw new Error("Invalid API key");let r=new d({environment:e.environment});this.config.clientTEEConnection=yield r.initialize()}})}handleAuthRequired(){return a(this,null,function*(){var s,o,h;if(this.config.clientTEEConnection==null)throw this.config.onAuthRequired==null?new Error(`${this.type} signer requires the onAuthRequired callback to handle OTP verification. This callback manages the authentication flow (sending OTP and verifying user input). If using our React/React Native SDK, this is handled automatically by the provider. For other environments, implement: onAuthRequired: (needsAuth, sendEmailWithOtp, verifyOtp, reject) => { /* your UI logic */ }`):new Error("Handshake parent not initialized");let e=yield(h=this.config.clientTEEConnection)==null?void 0:h.sendAction({event:"request:get-status",responseEvent:"response:get-status",data:{authData:{jwt:(o=(s=this.config.crossmint.experimental_customAuth)==null?void 0:s.jwt)!=null?o:"",apiKey:this.config.crossmint.apiKey}},options:l});if((e==null?void 0:e.status)!=="success")throw new Error(e==null?void 0:e.error);if(e.signerStatus==="ready"){this._needsAuth=!1;return}else this._needsAuth=!0;let{promise:r,resolve:i,reject:n}=this.createAuthPromise();if(this._authPromise={promise:r,resolve:i,reject:n},this.config.onAuthRequired)try{yield this.config.onAuthRequired(this._needsAuth,()=>this.sendMessageWithOtp(),t=>this.verifyOtp(t),()=>a(this,null,function*(){this._needsAuth=!1,this.config.onAuthRequired!=null&&(yield this.config.onAuthRequired(this._needsAuth,()=>this.sendMessageWithOtp(),t=>this.verifyOtp(t),()=>{var t;return(t=this._authPromise)==null?void 0:t.reject(new u)})),n(new u)}))}catch(t){n(t)}try{yield r}catch(t){throw t}})}getJwtOrThrow(){var r;let e=(r=this.config.crossmint.experimental_customAuth)==null?void 0:r.jwt;if(e==null)throw new Error("JWT is required");return e}createAuthPromise(){let e,r;return{promise:new Promise((n,s)=>{e=n,r=s}),resolve:e,reject:r}}sendMessageWithOtp(){return a(this,null,function*(){var n,s,o;if(this.config.clientTEEConnection==null)throw new Error("Handshake parent not initialized");let e=this.config.clientTEEConnection,r=this.getAuthId(),i=yield e.sendAction({event:"request:start-onboarding",responseEvent:"response:start-onboarding",data:{authData:{jwt:(s=(n=this.config.crossmint.experimental_customAuth)==null?void 0:n.jwt)!=null?s:"",apiKey:this.config.crossmint.apiKey},data:{authId:r}},options:l});if((i==null?void 0:i.status)==="success"&&i.signerStatus==="ready"){this._needsAuth=!1;return}(i==null?void 0:i.status)==="error"&&(console.error("[sendMessageWithOtp] Failed to send OTP:",i),(o=this._authPromise)==null||o.reject(new Error(i.error||"Failed to initiate OTP process.")))})}getAuthId(){return this.config.type==="email"?`email:${this.config.email}`:`phone:${this.config.phone}`}verifyOtp(e){return a(this,null,function*(){var i,n,s,o,h;if(this.config.clientTEEConnection==null)throw new Error("Handshake parent not initialized");let r=this.config.clientTEEConnection;try{let t=yield r.sendAction({event:"request:complete-onboarding",responseEvent:"response:complete-onboarding",data:{authData:{jwt:(n=(i=this.config.crossmint.experimental_customAuth)==null?void 0:i.jwt)!=null?n:"",apiKey:this.config.crossmint.apiKey},data:{onboardingAuthentication:{encryptedOtp:e}}},options:l});if((t==null?void 0:t.status)==="success"){this._needsAuth=!1,this.config.onAuthRequired!=null&&(yield this.config.onAuthRequired(this._needsAuth,()=>this.sendMessageWithOtp(),c=>this.verifyOtp(c),()=>{var c;return(c=this._authPromise)==null?void 0:c.reject(new u)})),(s=this._authPromise)==null||s.resolve();return}console.error("[verifyOtp] Failed to validate OTP:",t),this._needsAuth=!0;let f=(t==null?void 0:t.status)==="error"?t.error:"Failed to validate encrypted OTP";(o=this._authPromise)==null||o.reject(new Error(f))}catch(t){throw console.error("[verifyOtp] Error sending OTP validation request:",t),this._needsAuth=!0,(h=this._authPromise)==null||h.reject(t),t}})}},l={timeoutMs:1e4,intervalMs:5e3};export{g as a,l as b};
