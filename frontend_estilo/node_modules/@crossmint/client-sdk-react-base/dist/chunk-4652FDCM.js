import{a as j}from"./chunk-FHGKJ4BC.js";import{a as w,b as h,c as T}from"./chunk-22GIA4MK.js";import{createContext as D,useCallback as G,useEffect as V,useMemo as J,useState as k}from"react";import{CrossmintWallets as K}from"@crossmint/wallets-sdk";import{useContext as A}from"react";function Y(){let s=A(y);if(!s)throw new Error("useWallet must be used within CrossmintWalletProvider");return s}import{jsx as Q}from"react/jsx-runtime";var y=D({wallet:void 0,status:"not-loaded",getOrCreateWallet:()=>Promise.resolve(void 0),onAuthRequired:void 0,clientTEEConnection:void 0});function ie({children:s,createOnLogin:o,callbacks:r,onAuthRequired:a,clientTEEConnection:i}){let{crossmint:P,experimental_customAuth:e}=j("CrossmintWalletBaseProvider must be used within CrossmintProvider"),[d,C]=k(void 0),[l,u]=k("not-loaded"),f=G(n=>T(this,null,function*(){var S,v,x,E,R,c,q,B,F,O,b,H;if(!((e==null?void 0:e.jwt)==null||l==="in-progress")){if(d!=null)return d;try{u("in-progress");let p=K.from(P),g=(v=(S=n.options)==null?void 0:S.experimental_callbacks)==null?void 0:v.onWalletCreationStart,W=(E=(x=n.options)==null?void 0:x.experimental_callbacks)==null?void 0:E.onTransactionStart;if(((R=n==null?void 0:n.signer)==null?void 0:R.type)==="email"){let t=(c=n.signer.email)!=null?c:e==null?void 0:e.email,m=(q=n.signer.onAuthRequired)!=null?q:a;if(t==null)throw new Error("Email not found in experimental_customAuth or signer. Please set email in experimental_customAuth or signer.");n.signer=h(w({},n.signer),{email:t,onAuthRequired:m})}if(((B=n==null?void 0:n.signer)==null?void 0:B.type)==="phone"){let t=(F=n.signer.phone)!=null?F:e==null?void 0:e.phone,m=(O=n.signer.onAuthRequired)!=null?O:a;if(t==null)throw new Error("Phone not found in signer. Please set phone in signer.");n.signer=h(w({},n.signer),{phone:t,onAuthRequired:m})}if(((b=n==null?void 0:n.signer)==null?void 0:b.type)==="external-wallet"){let t=((H=n.signer)==null?void 0:H.address)!=null?n.signer:e.externalWalletSigner;if(t==null)throw new Error("External wallet config not found in experimental_customAuth or signer. Please set it in experimental_customAuth or signer.");n.signer=t}let I=yield p.getOrCreateWallet({chain:n.chain,signer:n.signer,owner:n.owner,plugins:n.plugins,delegatedSigners:n.delegatedSigners,options:{clientTEEConnection:i==null?void 0:i(),experimental_callbacks:{onWalletCreationStart:g!=null?g:r==null?void 0:r.onWalletCreationStart,onTransactionStart:W!=null?W:r==null?void 0:r.onTransactionStart}}});return C(I),u("loaded"),I}catch(p){console.error("Failed to create wallet:",p),C(void 0),u("error");return}}}),[P,e]);V(()=>{if(o!=null){if(o.signer.type==="email"&&(e==null?void 0:e.email)==null||o.signer.type==="external-wallet"&&(e==null?void 0:e.externalWalletSigner)==null&&o.signer.address==null)return;f(o)}},[o,f,e==null?void 0:e.email,e==null?void 0:e.externalWalletSigner]),V(()=>{(e==null?void 0:e.jwt)==null&&l!=="not-loaded"&&(u("not-loaded"),C(void 0))},[e==null?void 0:e.jwt,l]);let z=J(()=>({wallet:d,status:l,getOrCreateWallet:f,onAuthRequired:a,clientTEEConnection:i}),[f,d,l,a,i]);return Q(y.Provider,{value:z,children:s})}export{y as a,ie as b,Y as c};
